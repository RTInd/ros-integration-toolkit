/*
* (c) Copyright, Real-Time Innovations, 2022.  All rights reserved.
* RTI grants Licensee a license to use, modify, compile, and create derivative
* works of the software solely for use with RTI Connext DDS. Licensee may
* redistribute copies of the software provided that all such copies are subject
* to this license. The software is provided "as is", with no warranty of any
* type, including any warranty for fitness for any purpose. RTI is under no
* obligation to maintain or support the software. RTI shall not be liable for
* any incidental or consequential damages arising out of the use or inability
* to use the software.
*/

/** ================================================================
 * <%$<IDLFileNameOnly>$%>_app.cxx
 * Generated by RTI 'TypeRepo' utility, to support data types:
<%$<CommentListDataTypes>$%>
 **/

#include <algorithm>
#include <iostream>
#include <rti/util/util.hpp>                // for sleep()
<%$<ListIncludeFiles>$%>

/** ----------------------------------------------------------------
 * participant_main()
 **/
void participant_main(int domain_id)
{
    // Create a DomainParticipant with default Qos
    dds::domain::DomainParticipant participant(domain_id);
    
    // Create a waitset to be used by all subscribers
    dds::core::cond::WaitSet waitset;

    // Instantiate classes for the selected data types:
<%$<InstantiateClasses>$%>

    // main loop --------------------------------------------------------------
    for (int wcount = 0; 1; wcount++) {
        // publish a sample for each selected type:
<%$<CallPublishMethods>$%>

        // service any data received by subscribers
        waitset.dispatch(dds::core::Duration(0, 1000000));
        // sleep (to delay the loop rate)
        rti::util::sleep(dds::core::Duration(0, 800000000));
    }
}

/** ----------------------------------------------------------------
 * main()
 **/
int main(int argc, char *argv[])
{
    int domain_id = 0;

    if (argc >= 2) {
        domain_id = atoi(argv[1]);
    }

    // To turn on additional logging, include <rti/config/Logger.hpp> and
    // uncomment the following line:
    // rti::config::Logger::instance().verbosity(rti::config::Verbosity::STATUS_ALL);

    try {
        participant_main(domain_id);
    }
    catch (const std::exception& ex) {
        // This will catch DDS exceptions
        std::cerr << "Exception in participant_main(): " << ex.what() << std::endl;
        return -1;
    }

    // RTI Connext provides a finalize_participant_factory() method
    // if you want to release memory used by the participant factory singleton.
    // Uncomment the following line to release the singleton:
    //
    // dds::domain::DomainParticipant::finalize_participant_factory();

    return 0;
}

