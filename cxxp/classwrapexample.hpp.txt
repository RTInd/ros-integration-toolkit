/** ==================================================================
 * cros2_<$%<TypeNameLowerCase>%$>_support.hpp
 * Class wrapper for Connext native C++11 support for
 *  <$%<RosPathAndTypeName>%$> data type. 
 * This file is automatically generated by RTI TypeRepo
 **/

#ifndef __CROS2_<$%<TypeNameUpperCase>%$>_SUPPORT_HPP__
#define __CROS2_<$%<TypeNameUpperCase>%$>_SUPPORT_HPP__
#include "cros2_common.hpp"             // common includes and defs
#include "<%$<IDLFileNameOnly>$%>Plugin.hpp"

class cros2<$%<TypeNamePreserveCase>%$>
{
public:
    cros2<$%<TypeNamePreserveCase>%$>(
        const std::string topicName, uint32_t opt_en, 
        dds::domain::DomainParticipant participant,
        dds::core::cond::WaitSet *waitset_ext = NULL,
        int(*rcv_fptr)(dds::sub::DataReader<<$%<RosPathAndTypeName>%$>>) = NULL);
    ~cros2<$%<TypeNamePreserveCase>%$>();

    void publish(void);
    <$%<RosPathAndTypeName>%$> *sample_to_pub(void) { return &pub_sample; }

    int data_rcv_count_get(void) { return data_rcv_count; }

private:
    // DDS receive data handler
    int rcv_dataProc(dds::sub::DataReader<<$%<RosPathAndTypeName>%$>> & reader);

    // DDS Topic, DataWriter, DataReader, Sample(for publish)
    dds::topic::Topic<<$%<RosPathAndTypeName>%$>> data_topic;
    dds::pub::DataWriter<<$%<RosPathAndTypeName>%$>> data_wr;
    dds::sub::DataReader<<$%<RosPathAndTypeName>%$>> data_rd;
    <$%<RosPathAndTypeName>%$> pub_sample;

    // misc
    dds::core::cond::WaitSet waitset_int;       // internal waitset (if no external provided)
    dds::core::cond::WaitSet *waitset;          // external waitset (for chaining subscribers to a single waitset)
    int data_rcv_count;
};
#endif  // ndef __CROS2_<$%<TypeNameUpperCase>%$>_SUPPORT_HPP__