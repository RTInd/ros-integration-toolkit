/** ==================================================================
 * cros2_<$%<TypeNameLowerCase>%$>_support.hpp
 * Class wrapper for Connext native C++11 support for
 *  <$%<RosPathAndTypeName>%$> data type.
 * This file is automatically generated by RTI TypeRepo
 **/

#include "cros2_<$%<TypeNameLowerCase>%$>_support.hpp"

cros2<$%<TypeNamePreserveCase>%$>::cros2<$%<TypeNamePreserveCase>%$>(
    const std::string topicName, uint32_t opt_en, 
    dds::domain::DomainParticipant participant,
    dds::core::cond::WaitSet *waitset_ext,
    int(*rcv_fptr)(dds::sub::DataReader<<$%<RosPathAndTypeName>%$>>)) 
    :
    data_topic(dds::core::null), pub_sample(),
    data_wr(dds::core::null), data_rd(dds::core::null),
    waitset_int(), waitset()
{
    // create topic (pub or sub)
    const std::string data_topname("rt/" + topicName);
    data_topic = dds::topic::Topic<<$%<RosPathAndTypeName>%$>>(participant, data_topname);

    if (opt_en & CROS2_PUB_ON) {
        // DataWriter
        data_wr = dds::pub::DataWriter<<$%<RosPathAndTypeName>%$>>(dds::pub::Publisher(participant), data_topic);
    }

    if (opt_en & CROS2_SUB_ON) {
        // DataReader, ReadCondition, WaitSet
        data_rd = dds::sub::DataReader<<$%<RosPathAndTypeName>%$>>(dds::sub::Subscriber(participant), data_topic);
        dds::sub::cond::ReadCondition data_readCond(
            data_rd, dds::sub::status::DataState::any(),
            [rcv_fptr, this](/* dds::core::cond::Condition condition */)
        {
            if (rcv_fptr == NULL) {
                // use the default receive handler if no other was specified
                data_rcv_count += rcv_dataProc(data_rd);
            }
            else {
                // use the specified receive handler
                data_rcv_count += rcv_fptr(data_rd);
            }
        }
        );
        if(waitset_ext == NULL) {
            waitset = &waitset_int;
        }
        else {
            waitset = waitset_ext;
        }
        *waitset += data_readCond;
        data_rcv_count = 0;    }
}

// Receive data handler
int cros2<$%<TypeNamePreserveCase>%$>::rcv_dataProc(dds::sub::DataReader<<$%<RosPathAndTypeName>%$>>& reader)
{
    int count = 0;
    dds::sub::LoanedSamples<<$%<RosPathAndTypeName>%$>> samples = reader.take();
    for (const auto& sample : samples) {
        if (sample.info().valid()) {
            count++;
            std::cout << sample.data() << std::endl;
        }
    }
    return count;
}


/*ci
 * \brief Publish the <$%<TypeNamePreserveCase>%$> topic.
 */
void cros2<$%<TypeNamePreserveCase>%$>::publish(void)
{ 
    data_wr.write(pub_sample); 
}


// destructor
cros2<$%<TypeNamePreserveCase>%$>::~cros2<$%<TypeNamePreserveCase>%$>() {}
